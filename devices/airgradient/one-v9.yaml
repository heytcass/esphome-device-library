# AirGradient ONE - Board v9 hardware definition
# ESP32-C3-based air quality monitor
# https://www.airgradient.com/open-airgradient/instructions/overview/

esp32:
  board: esp32-c3-devkitm-1
  variant: ESP32C3

# Disable serial logging - ESP32-C3 has only 2 UARTs and both are used by sensors
logger:
  baud_rate: 0
  logs:
    component: ERROR  # Reduce component warnings

substitutions:
  led_strip_brightness: "25%"

# UART for SenseAir S8 CO2 sensor
uart:
  - rx_pin: GPIO0
    tx_pin: GPIO1
    baud_rate: 9600
    id: senseair_s8_uart

  - rx_pin: GPIO20
    tx_pin: GPIO21
    baud_rate: 9600
    id: pms5003_uart

# I2C for SHT40, SGP41, and OLED display
i2c:
  sda: GPIO7
  scl: GPIO6
  frequency: 400kHz

sensor:
  # PMS5003 Particulate Matter Sensor
  - platform: pmsx003
    type: PMSX003
    uart_id: pms5003_uart
    pm_2_5:
      name: "PM 2.5"
      id: pm_2_5
      on_value:
        # Calculate AQI from PM2.5 reading
        # https://en.wikipedia.org/wiki/Air_quality_index#Computing_the_AQI
        lambda: |-
          if (id(pm_2_5).state <= 12.0) {
            id(pm_2_5_aqi).publish_state((50.0 - 0.0) / (12.0 - 0.0) * (id(pm_2_5).state - 0.0) + 0.0);
          } else if (id(pm_2_5).state <= 35.4) {
            id(pm_2_5_aqi).publish_state((100.0 - 51.0) / (35.4 - 12.1) * (id(pm_2_5).state - 12.1) + 51.0);
          } else if (id(pm_2_5).state <= 55.4) {
            id(pm_2_5_aqi).publish_state((150.0 - 101.0) / (55.4 - 35.5) * (id(pm_2_5).state - 35.5) + 101.0);
          } else if (id(pm_2_5).state <= 150.4) {
            id(pm_2_5_aqi).publish_state((200.0 - 151.0) / (150.4 - 55.5) * (id(pm_2_5).state - 55.5) + 151.0);
          } else if (id(pm_2_5).state <= 250.4) {
            id(pm_2_5_aqi).publish_state((300.0 - 201.0) / (250.4 - 150.5) * (id(pm_2_5).state - 150.5) + 201.0);
          } else if (id(pm_2_5).state <= 350.4) {
            id(pm_2_5_aqi).publish_state((400.0 - 301.0) / (350.4 - 250.5) * (id(pm_2_5).state - 250.5) + 301.0);
          } else if (id(pm_2_5).state <= 500.4) {
            id(pm_2_5_aqi).publish_state((500.0 - 401.0) / (500.4 - 350.5) * (id(pm_2_5).state - 350.5) + 401.0);
          } else {
            id(pm_2_5_aqi).publish_state(500);
          }
    pm_1_0:
      name: "PM 1.0"
      id: pm_1_0
    pm_10_0:
      name: "PM 10.0"
      id: pm_10_0
    pm_0_3um:
      name: "PM 0.3"
      id: pm_0_3um
    update_interval: 2min

  - platform: template
    name: "PM 2.5 AQI"
    unit_of_measurement: "AQI"
    icon: "mdi:air-filter"
    accuracy_decimals: 0
    id: pm_2_5_aqi

  # SenseAir S8 CO2 Sensor
  - platform: senseair
    co2:
      name: "CO2"
      id: co2
      filters:
        - skip_initial: 2
        - clamp:
            min_value: 400
      on_value:
        # Set LED strip color based on CO2 level
        - if:
            condition:
                lambda: 'return id(co2).state < 800;'
            then:
              - light.turn_on:
                  id: led_strip
                  brightness: "${led_strip_brightness}"
                  red: 0%
                  green: 100%
                  blue: 0%
        - if:
            condition:
                lambda: 'return id(co2).state >= 800 && id(co2).state < 1000;'
            then:
              - light.turn_on:
                  id: led_strip
                  brightness: "${led_strip_brightness}"
                  red: 100%
                  green: 100%
                  blue: 0%
        - if:
            condition:
                lambda: 'return id(co2).state >= 1000 && id(co2).state < 1500;'
            then:
              - light.turn_on:
                  id: led_strip
                  brightness: "${led_strip_brightness}"
                  red: 100%
                  green: 50%
                  blue: 0%
        - if:
            condition:
                lambda: 'return id(co2).state >= 1500 && id(co2).state < 2000;'
            then:
              - light.turn_on:
                  id: led_strip
                  brightness: "${led_strip_brightness}"
                  red: 100%
                  green: 0%
                  blue: 0%
        - if:
            condition:
                lambda: 'return id(co2).state >= 2000 && id(co2).state < 3000;'
            then:
              - light.turn_on:
                  id: led_strip
                  brightness: "${led_strip_brightness}"
                  red: 60%
                  green: 0%
                  blue: 60%
        - if:
            condition:
                lambda: 'return id(co2).state >= 3000 && id(co2).state < 10000;'
            then:
              - light.turn_on:
                  id: led_strip
                  brightness: "${led_strip_brightness}"
                  red: 40%
                  green: 0%
                  blue: 0%
    id: senseair_s8
    uart_id: senseair_s8_uart

  # SHT40 Temperature and Humidity Sensor
  - platform: sht4x
    temperature:
      name: "Temperature"
      id: temp
    humidity:
      name: "Humidity"
      id: humidity
    address: 0x44

  # SGP41 VOC and NOx Sensor
  - platform: sgp4x
    voc:
      name: "VOC Index"
      id: voc
    nox:
      name: "NOx Index"
      id: nox
    compensation:
      temperature_source: temp
      humidity_source: humidity

switch:
  - platform: safe_mode
    name: "Safe Mode"
    entity_category: diagnostic

  - platform: template
    name: "Display Temperature in °F"
    icon: "mdi:thermometer"
    id: display_in_f
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true

  - platform: restart
    name: "Restart"
    entity_category: diagnostic

button:
  - platform: template
    name: "SenseAir S8 Calibration"
    id: senseair_s8_calibrate_button
    entity_category: config
    on_press:
      then:
        - senseair.background_calibration: senseair_s8
        - delay: 70s
        - senseair.background_calibration_result: senseair_s8

  - platform: template
    name: "Enable S8 Auto Calibration"
    id: senseair_s8_enable_calibrate_button
    entity_category: config
    on_press:
      then:
        - senseair.abc_enable: senseair_s8

  - platform: template
    name: "Disable S8 Auto Calibration"
    id: senseair_s8_disable_calibrate_button
    entity_category: config
    on_press:
      then:
        - senseair.abc_disable: senseair_s8

output:
  - platform: gpio
    id: watchdog
    pin: GPIO2

light:
  - platform: esp32_rmt_led_strip
    color_correct: [50%, 50%, 50%]
    rgb_order: GRB
    pin: GPIO10
    num_leds: 11
    rmt_channel: 0
    chipset: ws2812
    name: "LED Strip"
    id: led_strip

font:
  - file:
      type: gfonts
      family: Poppins
      weight: light
    id: poppins_light
    size: 14
    glyphs: '!"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz/µ³'
  - file:
      type: gfonts
      family: Poppins
      weight: light
    id: poppins_light_12
    size: 12
    glyphs: '!"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz/µ³'

display:
  - platform: ssd1306_i2c
    model: "SH1106 128x64"
    id: oled_display
    address: 0x3C
    pages:
      - id: summary1
        lambda: |-
          it.printf(0, 0, id(poppins_light), "CO2:");
          it.printf(128, 0, id(poppins_light), TextAlign::TOP_RIGHT, "%.0f ppm", id(co2).state);
          it.printf(0, 16, id(poppins_light), "PM2.5:");
          it.printf(128, 16, id(poppins_light), TextAlign::TOP_RIGHT, "%.0f µg/m³", id(pm_2_5).state);
          it.printf(0, 32, id(poppins_light), "Temp:");
          if (id(display_in_f).state) {
            it.printf(128, 32, id(poppins_light), TextAlign::TOP_RIGHT, "%.1f°F", id(temp).state*9/5+32);
          } else {
            it.printf(128, 32, id(poppins_light), TextAlign::TOP_RIGHT, "%.1f°C", id(temp).state);
          }
          it.printf(0, 48, id(poppins_light), "Humidity:");
          it.printf(128, 48, id(poppins_light), TextAlign::TOP_RIGHT, "%.1f%%", id(humidity).state);
      - id: summary2
        lambda: |-
          it.printf(0, 0, id(poppins_light), "CO2:");
          it.printf(128, 0, id(poppins_light), TextAlign::TOP_RIGHT, "%.0f ppm", id(co2).state);
          it.printf(0, 16, id(poppins_light), "PM2.5:");
          it.printf(128, 16, id(poppins_light), TextAlign::TOP_RIGHT, "%.0f µg/m³", id(pm_2_5).state);
          it.printf(0, 32, id(poppins_light), "VOC:");
          it.printf(128, 32, id(poppins_light), TextAlign::TOP_RIGHT, "%.0f", id(voc).state);
          it.printf(0, 48, id(poppins_light), "NOx:");
          it.printf(128, 48, id(poppins_light), TextAlign::TOP_RIGHT, "%.0f", id(nox).state);
      - id: boot
        lambda: |-
          it.printf(0, 0, id(poppins_light), "ID:");
          it.printf(128, 0, id(poppins_light), TextAlign::TOP_RIGHT, "%s", get_mac_address().c_str());
          it.printf(0, 21, id(poppins_light_12), "AirGradient ONE v9");
          it.printf(0, 42, id(poppins_light_12), "ESPHome");
    on_page_change:
      to: boot
      then:
        - delay: 5s
        - display.page.show_next: oled_display
        - component.update: oled_display

interval:
  - interval: 30s
    # Watchdog - notify device is alive
    then:
      - output.turn_on: watchdog
      - delay: 20ms
      - output.turn_off: watchdog

  - interval: 5s
    # Auto-rotate display pages
    then:
      - display.page.show_next: oled_display
      - component.update: oled_display

# Web server for direct browser access
web_server:
  port: 80
  version: 2
